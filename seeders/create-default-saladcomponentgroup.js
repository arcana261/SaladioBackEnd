'use strict';

const {SaladComponent, SaladComponentGroup} = require('../models');
const sql = require('../api/helpers/sql');
const assert = require('assert');
const {attrs} = require('../meta/saladcomponent');


const attrValues = [
  [1.23, 0.3, 3.29, 17, 94.61, 1.19, 2.1, 33, 0.97, 14, 30, 0.23, 0.048, 0.155, 0.13, 0, 4, 0.072, 0.067, 0.313, 0.074, 0, 102.5, 436],
  [0.9, 0.14, 2.97, 14, 95.64, 1.97, 1.2, 18, 0.41, 7, 20, 0.15, 0.025, 0.125, 0.18, 0, 2.8, 0.041, 0.025, 0.123, 0.042, 0, 24.1, 25],
  [5.33, 0.54, 26.54, 124, 67.15, 0.8, 3.23, 15, 1.06, 30, 89, 0.81, 0.167, 1.379, 0.3, 0, 0, 0.108, 0.045, 0.707, 0.079, 0, 0.7, 0],
  [2.86, 0.39, 3.63, 23, 91.4, 0.42, 2.2, 99, 2.71, 79, 49, 0.53, 0.13, 0.897, 2.03, 0, 28.1, 0.078, 0.189, 0.724, 0.195, 0, 482.9, 469],
  [1.2, 0.1, 3, 14, 95, 1.42, 0.6, 43, 0.3, 14, 40, 0.2, 0.02, 0.19, 0, 0, 25, 0.05, 0.04, 0.6, 0.14, 0, 80, 15.83333],
  [23.7, 2.3, 0, 116, 73, 0, 0, 10, 2.5, 20, 200, 3.4, 0.06, 0, 0, 0.1, 0, 0.04, 0.09, 0, 0.19, 2, 0, 0],
  [24, 2, 0.2, 99, 78.6, 0, 0, 92, 1.8, 60, 250, 1.4, 0.7, 0, 0, 0.5, 1.5, 0.05, 0.03, 0, 2, 5, 0, 0],
  [11.8, 10.012, 1.85, 141, 76.252, 0.77, 0, 44.816, 1.387, 8.702, 125.818, 1.159, 0.055, 0.049, 2.447, 57.558, 0, 0.06, 0.47, 0.111, 0.068, 1.616, 0.3, 191.177],
  [9.01, 0.65, 26.22, 143, 62.95, 0.34, 9, 46, 2.09, 50, 147, 0.98, 0.219, 0.453, 0.94, 0, 0.8, 0.193, 0.062, 0.318, 0.229, 0, 3.5, 0],
  [14.73, 15.75, 15.01, 263, 52.74, 0.37, 1.1, 19, 1.11, 23, 211, 0.78, 0.205, 0.229, 0.08, 9, 0.8, 0.211, 0.091, 5.71, 0.041, 0.27, 14.7, 0],
  [14.73, 15.75, 15.01, 263, 52.74, 0.37, 1.1, 19, 1.11, 23, 211, 0.78, 0.205, 0.229, 0.08, 9, 0.8, 0.211, 0.091, 5.71, 0.041, 0.27, 14.7, 0],
  [12.6, 22, 1.9, 261, 60, 1.5, 0, 6, 2.2, 13, 205, 1.8, 0.2, 0, 0, 480, 0, 0.1, 0.2, 3.2, 0.2, 3.1, 1.3, 0],
  [2, 0.1, 6.1, 27, 91, 2.27, 3.1, 35, 0.4, 28, 42, 0.27, 0.062, 0.18, 0.17, 0, 31, 0.07, 0.03, 0.3, 0.19, 0, 68.8, 50],
  [1.43, 0.16, 7.37, 31, 90.39, 3.83, 2.1, 45, 0.8, 16, 30, 0.22, 0.017, 0.243, 0.11, 0, 57, 0.064, 0.069, 0.418, 0.209, 0, 38.2, 56],
  [2.82, 0.37, 6.64, 34, 89.3, 1.7, 2.4, 47, 0.73, 21, 66, 0.41, 0.049, 0.21, 0.78, 0, 89.2, 0.071, 0.117, 0.639, 0.175, 0, 101.6, 31],
  [1.92, 0.28, 4.97, 25, 92.07, 1.91, 1.75, 22, 0.42, 15, 44, 0.27, 0.039, 0.155, 0.08, 0, 48.2, 0.05, 0.06, 0.507, 0.184, 0, 15.5, 0],
  [1.95, 0.77, 13.86, 61, 82.61, 2.83, 1.7, 4, 0.36, 15, 46, 0.39, 0.028, 0.082, 0.03, 0, 2.6, 0.015, 0.015, 0.884, 0.037, 0, 0, 2],
  [1.95, 0.77, 13.86, 61, 82.61, 2.83, 1.7, 4, 0.36, 15, 46, 0.39, 0.028, 0.082, 0.03, 0, 2.6, 0.015, 0.015, 0.884, 0.037, 0, 0, 2],
  [5.42, 0.4, 14.45, 81, 78.86, 5.67, 5.1, 25, 1.47, 33, 108, 1.24, 0.176, 0.41, 0.13, 0, 40, 0.266, 0.132, 2.09, 0.169, 0, 24.8, 38],
  [1.03, 15.32, 3.84, 146, 75.28, 0.54, 3.3, 52, 0.49, 11, 4, 0.04, 0.12, 0, 3.81, 0, 0, 0.021, 0.007, 0.237, 0.031, 0, 1.4, 20],
  [1.03, 15.32, 3.84, 146, 75.28, 0.54, 3.3, 52, 0.49, 11, 4, 0.04, 0.12, 0, 3.81, 0, 0, 0.021, 0.007, 0.237, 0.031, 0, 1.4, 20],
  [0.9, 0.2, 4.6, 20, 93.9, 0, 0, 10, 0.3, 10, 20, 0.1, 0.1, 0.1, 0.4, 0, 80, 0.1, 0, 0.5, 0.2, 0, 7.4, 0],
  [0.69, 0.17, 2.97, 16, 95.43, 1.34, 1.5, 40, 0.2, 11, 24, 0.13, 0.035, 0.103, 0.27, 0, 3.1, 0.021, 0.057, 0.32, 0.074, 0, 29.3, 22],
  [1.1, 0.1, 9.34, 40, 89.11, 4.24, 1.7, 23, 0.21, 10, 29, 0.17, 0.039, 0.129, 0.02, 0, 7.4, 0.046, 0.027, 0.116, 0.12, 0, 0.4, 0],
  [1.83, 0.19, 7.34, 32, 89.83, 2.33, 2.6, 72, 1.48, 20, 37, 0.39, 0.083, 0.16, 0.55, 0, 18.8, 0.055, 0.08, 0.525, 0.061, 0, 207, 50],
  [3.09, 0.34, 3.28, 22, 92.43, 1.98, 1, 3, 0.5, 9, 86, 0.52, 0.318, 0.047, 0.01, 7, 2.1, 0.081, 0.402, 3.607, 0.104, 0.04, 0, 0],
  [1.87, 0.1, 20.13, 87, 76.98, 0.87, 1.53, 5, 0.31, 22, 44, 0.3, 0.188, 0.138, 0.01, 0, 13, 0.106, 0.02, 1.439, 0.299, 0, 2.1, 0],
  [3, 0.2, 5.9, 30, 90.4, 4.1, 1.8, 13, 0.9, 21, 54, 0.4, 0.2, 0.2, 0.1, 0, 13.2, 0.1, 0.1, 0.7, 0.1, 0, 33, 0],
  [0.93, 0.24, 9.58, 41, 88.29, 4.74, 2.44, 33, 0.3, 12, 35, 0.24, 0.045, 0.143, 0.66, 0, 5.9, 0.066, 0.058, 0.983, 0.138, 0, 13.2, 835],
  [1.16, 0.19, 3.18, 16, 94.78, 0, 0.9, 5, 0.47, 8, 29, 0.14, 0.062, 0.088, 0, 0, 16, 0.046, 0.034, 0.593, 0.06, 0, 0, 75],
  [0.65, 0.11, 3.63, 16, 95.23, 1.67, 0.73, 16, 0.28, 13, 24, 0.2, 0.041, 0.079, 0.03, 0, 2.8, 0.027, 0.033, 0.098, 0.04, 0, 16.4, 5],
  [0.33, 0.2, 2.26, 11, 94.08, 1.06, 1.2, 0, 0.4, 4, 14, 0.02, 0.085, 0.011, 0.09, 0, 1, 0, 0.01, 0, 0.009, 0, 47, 10],
  [0.35, 0.11, 20.2, 78, 78.99, 16.9, 0.92, 14, 0.38, 16, 7, 0.12, 0.101, 1.08, 0.01, 0, 7.4, 0.09, 0.025, 0.287, 0.074, 0, 0.3, 1],
  [2.71, 0.4, 3.11, 21, 92.73, 0, 1.1, 21, 0.79, 33, 93, 0.83, 0.097, 0.196, 0.12, 0, 34.1, 0.042, 0.036, 0.705, 0.142, 0, 0, 25],
  [16.89, 6.9, 66.27, 389, 8.22, 0, 10.6, 54, 4.72, 177, 523, 3.97, 0.626, 4.916, 0.53, 0, 0, 0.763, 0.139, 0.961, 0.119, 0, 0, 0],
  [2.97, 0.79, 6.33, 36, 87.71, 0.85, 3.3, 138, 6.2, 50, 58, 1.07, 0.149, 0.16, 0.75, 0, 133, 0.086, 0.098, 1.313, 0.09, 0, 1640, 421],
  [28.42, 27.84, 13.91, 420, 22.65, 0.07, 0, 853, 0.49, 34, 627, 4.2, 0.04, 0.071, 0.53, 21, 0, 0.026, 0.358, 0.08, 0.081, 1.4, 1.7, 262],
  [14.21, 21.28, 4.09, 264, 55.22, 4.09, 0, 493, 0.65, 19, 337, 2.88, 0.032, 0.028, 0.18, 16, 0, 0.154, 0.844, 0.991, 0.424, 1.69, 1.8, 125],
  [22.17, 22.35, 2.19, 300, 52, 1.03, 0, 505, 0.44, 20, 354, 2.92, 0.011, 0.03, 0.19, 16, 0, 0.03, 0.283, 0.104, 0.037, 2.28, 2.3, 179],
  [21.4, 28.74, 2.34, 353, 42.41, 0.5, 0, 528, 0.31, 23, 387, 2.66, 0.04, 0.009, 0.25, 21, 0, 0.029, 0.382, 1.016, 0.166, 1.22, 2.4, 198],
  [24.04, 33.82, 1.33, 406, 37.1, 0.28, 0, 675, 0.16, 27, 473, 3.43, 0.056, 0.033, 0.78, 6.64, 0, 0.027, 0.434, 0.039, 0.049, 0.88, 2.9, 263],
  [24.94, 28, 2.22, 357, 41.46, 2.22, 0, 700, 0.24, 29, 546, 3.9, 0.036, 0.011, 0.24, 20, 0, 0.03, 0.334, 0.063, 0.08, 1.54, 2.3, 165],
  [26, 52, 11.2, 623, 2.8, 3.1, 7, 60, 2.1, 210, 370, 3, 0.5, 0, 0, 0, 0, 0.9, 0.15, 0, 0.3, 0, 0, 0],
  [24.06, 59.33, 9.58, 619, 4.56, 1.1, 6.8, 61, 3.12, 201, 513, 3.37, 1.36, 3.896, 2.08, 0, 1.7, 0.057, 0.13, 0.47, 0.583, 0, 2.7, 2],
  [20.8, 51.5, 20, 584, 4.7, 2.6, 8.6, 78, 5.2, 325, 660, 5, 1.8, 1.9, 33.2, 0, 1.4, 1.5, 0.4, 8.3, 1.3, 0, 0, 0],
  [13.5, 4, 68, 370, 8, 14.5, 2.5, 15, 2, 10, 150, 0.6, 0.2, 0, 0, 0, 0, 0.2, 0.06, 0, 0.05, 0, 0, 0],
  [3.1, 0.5, 79.2, 299, 15.4, 59.2, 3.7, 50, 1.9, 32, 101, 0.2, 0.3, 0.3, 0.1, 0, 2.3, 0.1, 0.1, 0.8, 0.2, 0, 3.5, 0],
  [39.58, 21.62, 32.72, 452, 0.8, 0, 8.1, 140, 3.95, 228, 649, 4.77, 1.079, 2.184, 0.77, 0, 4.6, 0.427, 0.755, 1.056, 0.225, 0, 37, 0],
  [20.45, 61.21, 11.73, 631, 3.75, 0.48, 11.6, 60, 6.36, 345, 667, 6.73, 1.4, 1.44, 1.68, 0, 0, 0.699, 0.09, 5.8, 0.4, 0, 0, 3],
  [1.67, 1.17, 18.7, 83, 77.93, 13.67, 4, 10, 0.3, 12, 36, 0.35, 0.158, 0.119, 0.6, 0, 10.2, 0.067, 0.053, 0.293, 0.075, 0, 16.4, 0],
  [2.13, 0.52, 3.67, 23, 92.21, 0.87, 2.8, 67, 1.77, 26, 48, 0.5, 0.225, 0.426, 2.5, 0, 27, 0.067, 0.162, 1.114, 0.149, 0, 310, 337],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
];


const weights = [220, 220, 170, 180, 200, 80, 50, 40, 60, 80, 80, 30, 30, 30, 30, 40, 30, 23, 45, 50, 50, 35, 30, 20, 20, 40, 80, 25, 30, 60, 55, 30, 20, 50, 30, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 30, 20, 20, 20, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const names = ['کاهو رسمی', 'کاهو پیچ', 'پاستا پخته شده', 'اسفناج', 'کاهو چینی', 'استیک گوساله', 'میگو', 'تخم مرغ', 'لوبیا چیتی', 'سینه مرِغ با ادویه ایتالیایی', 'سینه مرغ با ادویه چینی', 'سالامی', 'کلم سفید', 'کلم قرمز', 'بروکلی', 'گل کلم', 'ذرت', 'بچه ذرت', 'نخود فرنگی', 'زیتون سیاه', 'زیتون سبز', 'فلفل دلمه ای', 'کرفس', 'پیاز', 'پیازچه ', 'قارچ ', 'سیب زمینی', 'جوانه ماش', 'هویج', 'گوجه فرنگی', 'خیار', 'خیارشور', 'آناناس', 'کدو سبز', 'یلغور جو', 'جعفری', 'پنیر پارمسان', 'پنیر فتا', 'پنیر موزارلا', 'پنیر آبی (بلوچیز)', 'پنیر چدار', 'پنیر گودا', 'بادام زمینی', 'گردو', 'تخمه آفتابگردان', 'نان کروتن', 'کشمش', 'دانه سویا', 'کنجد', 'انار', 'گشنیز',
'سس سزار','سس هزار جزیره', 'سس مخصوص', 'سس رنچ', 'سس کوکتل', 'سس پاستا', 'سس انار', 'سس کره بادام زمینی', 'وینگار موستاردو', 'وینگار بازیلیک', 'وینگار لمون هانی'];
const descriptions = ['Lettuce, cos or romaine', 'Lettuce, iceberg', 'Pasta, spaghetti, whole-wheat, cooked', 'Spinach, raw', 'Cabbage, napa, raw', 'Beef steak', 'Shrimp', 'Egg, chicken, whole, cooked, boiled in shell, hard-cooked', 'Beans, pinto, boiled', 'Chicken breast tenders, breaded, uncooked', 'Chicken breast tenders, breaded, uncooked', 'Salami', 'Cabbage, savoy, raw', 'Cabbage, red, raw', 'Broccoli, raw', 'Cauliflower, raw', 'Corn, sweet, canned, brine pack, solids and liquid', 'Babycorn', 'Peas, green, raw', 'Olive, pickled, canned or bottled, green', 'Olive, pickled, canned or bottled, green', 'capcicum', 'Celery, raw', 'Onion, raw', 'Onion, spring (green) or scallion (includes tops and bulb), raw', 'Mushroom, white, raw', 'Potato, boiled with skin, flesh', 'mung bean sprouts', 'Carrot, raw', 'Tomato, orange, raw', 'Cucumber, raw', 'Pickles, cucumber, sour', 'Pineapple, canned heavy syrup pack, solids and liquid', 'Squash, summer, zucchini, baby, raw', 'Grains, oats', 'Parsley, fresh', 'Cheese, parmesan, dry grated', 'Cheese, feta', 'Cheese, mozzarella, (52% water, 22.5% M.F.)', 'Cheese, blue', 'Cheese, cheddar', 'Cheese, gouda', 'peanut', 'Nuts, walnuts, black, dried', 'Sunflower seed', 'crouton', 'Raisin', 'Soybeans, dry, roasted', 'Seeds, sesame seed kernels, dried, shelled', 'Pomegranate, raw', 'Coriander (cilantro), raw',
'sause','sause','sause','sause','sause','sause','sause','sause','sause','sause','sause'];
const codes = ['RomainLettuce', 'Iceberg', 'Pasta', 'Spinach', 'Nappa', 'Beef', 'Shrimp', 'Egg', 'Pintobean', 'Chickenbrst', 'Chickenbrst', 'Salami', 'Savoy', 'RedCabbage', 'Broccoli', 'Cauliflower', 'Corn', 'Babycorn', 'pea', 'Oliveblack', 'Olivegreen', 'capsicum', 'Celery', 'onion', 'scallion', 'mushroom', 'potato', 'mungbeansprt', 'carrot', 'tomato', 'cucumber', 'pickles', 'pineapple', 'zucchini', 'oat', 'parsley', 'parmesan', 'feta', 'mozzarella', 'bluecheese', 'cheddar', 'gouda', 'peanut', 'walnut', 'sunflower', 'crouton', 'raisin', 'soybean', 'sesame', 'pomegranate', 'coriander',
 'sause01','sause02','sause03','sause04','sause05','sause06','sause07','sause08','sause09','sause10','sause11'];
const prices = [1500, 1500, 2000, 2500, 2000, 7000, 7000, 1000, 2000, 4000, 4000, 5000, 1000, 1000, 2000, 1000, 1500, 1000, 2000, 2500, 2500, 1500, 500, 500, 500, 2000, 1500, 1500, 500, 1500, 1000, 1000, 3000, 500, 1500, 500, 3000, 1000, 1500, 3000, 3000, 1500, 500, 1000, 500, 500, 500, 500, 500, 3000, 500,
0,0,0,0,0,0,0,0,0,0,0];
const groups = ['پایه سالاد', 'پایه سالاد', 'پایه سالاد', 'پایه سالاد', 'پایه سالاد', 'پروتئین', 'پروتئین', 'پروتئین', 'پروتئین', 'پروتئین', 'پروتئین', 'پروتئین', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'سبزیجات', 'پنیر', 'پنیر', 'پنیر', 'پنیر', 'پنیر', 'پنیر', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار', 'خشکبار',
'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار', 'سس و ونیگار'];

module.exports = sql.modernize({
  up: function*(t, queryInterface, Sequelize) {
    assert(weights.length === names.length);
    assert(descriptions.length === names.length);
    assert(codes.length === names.length);
    assert(prices.length === names.length);
    assert(groups.length === names.length);

    let groupHash = {};
    for (const group of groups) {
      if (!(group in groupHash)) {
        groupHash[group] = yield SaladComponentGroup.create({
          name: group
        }, {transaction: t});
      }
    }

    for (let i = 0; i < names.length; i++) {
      const vals = attrValues[i];
      const weight = weights[i];
      const name = names[i];
      const description = descriptions[i];
      const code = codes[i];
      const price = prices[i];
      const group = groups[i];

      console.log('--------------------- i = ', i);

      assert(vals.length === attrs.length);

      let row = {
        name: name,
        description: description,
        code: code.toLowerCase(),
        price: price,
        weight: weight
      };

      for (let j = 0; j < vals.length; j++) {
        row[attrs[j]] = vals[j] * (weight / 100);
      }

      console.log(row);

      const component = yield SaladComponent.create(row, {transaction: t});
      yield component.setSaladComponentGroup(groupHash[group], {transaction: t});
    }
  },

  down: function (queryInterface, Sequelize) {
    throw new Error('can not undo saladComponentGroup seed');
  }
});
